{"version":3,"sources":["./src/app/services/data.service.ts","./src/app/services/image.service.ts"],"names":[],"mappings":"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","file":"default~pages-group-group-module~pages-group-info-group-info-module~pages-message-message-module~pag~ff8aa4ba.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFireDatabase, AngularFireAction } from '@angular/fire/database';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport 'firebase/auth';\nimport * as firebase from \"firebase/app\";\nimport { FirestoreService } from 'src/shared/services/firestore/firestore.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(\n    private afAuth: AngularFireAuth,\n    private afdb: AngularFireDatabase,\n    private firestore: FirestoreService\n  ) { }\n\n\n  // Get all users\n  getUsers() {\n    // return this.afdb.list('/accounts', ref => ref.orderByChild('name'));\n  }\n\n  searchUser(keyword) {\n    // return this.firestore.list('/accounts', (ref: any) => ref.where('name', '>=',keyword).where('name','<=',keyword + \"\\uf8ff\").orderBy('name'));\n  }\n\n  // Get user with username\n  getUserWithUsername(username) {\n    return this.firestore.col$('users', ref => ref.orderByChild('username').equalTo(username));\n  }\n\n  // Get logged in user data\n  getCurrentUser() {\n    return this.firestore.doc$('users/' + firebase.auth().currentUser.uid);\n  }\n\n  // Get user by their userId\n  getUser(userId) {\n    return this.firestore.doc$('users/' + userId);\n  }\n\n  // Get requests given the userId.\n  getRequests(userId) {\n    return this.afdb.object('/requests/' + userId);\n  }\n\n  // Get friend requests given the userId.\n  getFriendRequests(userId) {\n    return this.afdb.list('/requests', ref => ref.orderByChild('receiver').equalTo(userId));\n  }\n\n  // Get conversation given the conversationId.\n  getConversation(conversationId) {\n    return this.firestore.doc$('conversations/' + conversationId);\n  }\n\n  // Get conversations of the current logged in user.\n  public getConversations() {\n    return this.firestore.colWithIds$('users/' + firebase.auth().currentUser.uid + '/conversations', ref => ref.orderBy('createdAt', 'desc'));\n  }\n\n  // Get messages of the conversation given the Id.\n  getConversationMessages(conversationId) {\n    return this.firestore.colOnce$('conversations/' + conversationId + '/messages', ref => ref.orderBy('createdAt', 'desc'));\n  }\n\n  // Get messages of the group given the Id.\n  getGroupMessages(groupId, date) {\n    return this.firestore.colOnce$('groups/' + groupId + '/messages', ref => ref.orderBy('createdAt').startAt(date));\n  }\n\n  // Get groups of the logged in user.\n  getGroups() {\n    return this.firestore.col$('users/' + firebase.auth().currentUser.uid + '/groups');\n  }\n\n  // Get group info given the groupId.\n  getGroup(groupId) {\n    return this.firestore.doc$('groups/' + groupId);\n  }\n\n  getBlockedLists() {\n    return this.firestore.col$('users/' + firebase.auth().currentUser.uid + '/conversations', ref => ref.orderByChild('blocked').equalTo(true));\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Camera, CameraOptions } from '@ionic-native/camera/ngx';\nimport { AngularFireDatabase } from '@angular/fire/database';\nimport { MediaCapture, MediaFile, CaptureError, CaptureImageOptions } from '@ionic-native/media-capture/ngx';\nimport { File } from '@ionic-native/file/ngx';\nimport * as firebase from \"firebase/app\";\nimport { LoaderService } from './loader.service';\nimport { FirestoreService } from 'src/shared/services/firestore/firestore.service';\nimport { CommonService } from 'src/shared/services/common/common.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ImageService {\n\n  private profilePhotoOptions: CameraOptions = {\n    quality: 50,\n    targetWidth: 384,\n    targetHeight: 384,\n    destinationType: this.camera.DestinationType.DATA_URL,\n    encodingType: this.camera.EncodingType.JPEG,\n    correctOrientation: true\n  };\n\n  private photoMessageOptions: CameraOptions = {\n    quality: 50,\n    destinationType: this.camera.DestinationType.DATA_URL,\n    encodingType: this.camera.EncodingType.JPEG,\n    correctOrientation: true,\n    allowEdit: true\n  };\n\n  private groupPhotoOptions: CameraOptions = {\n    quality: 50,\n    targetWidth: 384,\n    targetHeight: 384,\n    destinationType: this.camera.DestinationType.DATA_URL,\n    encodingType: this.camera.EncodingType.JPEG,\n    correctOrientation: true\n  };\n\n\n  constructor(\n    public angularfire: AngularFireDatabase,\n    public loadingProvider: LoaderService,\n    public camera: Camera,\n    public mediaCapture: MediaCapture,\n    private firestore: FirestoreService,\n    private commonService: CommonService,\n    public file: File) {\n    console.log(\"Initializing Image Provider\");\n  }\n\n  // Function to convert dataURI to Blob needed by Firebase\n  imgURItoBlob(dataURI) {\n    var binary = atob(dataURI.split(',')[1]);\n    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n    var array = [];\n    for (var i = 0; i < binary.length; i++) {\n      array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {\n      type: mimeString\n    });\n  }\n\n  // Generate a random filename of length for the image to be uploaded\n  generateFilename() {\n    var length = 8;\n    var text = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text + \".jpg\";\n  }\n\n  // Set ProfilePhoto given the user and the cameraSourceType.\n  // This function processes the imageURI returned and uploads the file on Firebase,\n  // Finally the user data on the database is updated.\n  setProfilePhoto(user, sourceType) {\n    console.log(user);\n    this.profilePhotoOptions.sourceType = sourceType;\n    this.loadingProvider.presentProcessingLoading();\n    // Get picture from camera or gallery.\n    this.camera.getPicture(this.profilePhotoOptions).then((imageData) => {\n      // Process the returned imageURI.\n      let imgBlob = this.imgURItoBlob(\"data:image/jpeg;base64,\" + imageData);\n      let metadata = {\n        'contentType': imgBlob.type\n      };\n      let name = this.generateFilename();\n      let dpStorageRef = firebase.storage().ref().child('images/' + user.userId + '/' + name);\n      // Generate filename and upload to Firebase Storage.\n      dpStorageRef.put(imgBlob, metadata).then((snapshot) => {\n        // Delete previous profile photo on Storage if it exists.\n        // this.deleteImageFile(user.img);\n        // URL of the uploaded image!\n        console.log(snapshot);\n\n\n        dpStorageRef.getDownloadURL().then(res => {\n          console.log(res);\n          let url = res;\n\n          let profile = {\n            displayName: user.name,\n            photoURL: url\n          };\n          // Update Firebase User.\n          firebase.auth().currentUser.updateProfile(profile)\n            .then((success) => {\n              // Update User Data on Database.\n              this.angularfire.object('/accounts/' + user.userId).update({\n                img: url\n              }).then((success) => {\n                this.loadingProvider.dismissLoader();\n                this.loadingProvider.showToast(\"Profile Updated\");\n              }).catch((error) => {\n                console.log(error);\n                this.loadingProvider.dismissLoader();\n                this.loadingProvider.showToast(\"Something went wrong\");\n              });\n            })\n            .catch((error) => {\n              console.log(error);\n              this.loadingProvider.dismissLoader();\n              this.loadingProvider.showToast(\"Something went wrong\");\n            });\n\n        });\n\n\n\n      }).catch((error) => {\n        console.log(error);\n        this.loadingProvider.dismissLoader();\n        this.loadingProvider.showToast(\"Something went wrong\");\n      });\n    }).catch((error) => {\n      this.loadingProvider.dismissLoader();\n    });\n  }\n\n  // Upload and set the group object's image.\n  setGroupPhoto(group, sourceType) {\n    this.groupPhotoOptions.sourceType = sourceType;\n    // this.loadingProvider.presentProcessingLoading();\n    // Get picture from camera or gallery.\n    this.camera.getPicture(this.groupPhotoOptions).then((imageData) => {\n      // Process the returned imageURI.\n      let imgBlob = this.imgURItoBlob(\"data:image/jpeg;base64,\" + imageData);\n      let metadata = {\n        'contentType': imgBlob.type\n      };\n\n      let name = this.generateFilename();\n      let groupStorageRef = firebase.storage().ref().child('images/' + firebase.auth().currentUser.uid + '/' + name);\n      groupStorageRef.put(imgBlob, metadata).then((snapshot) => {\n        // this.deleteImageFile(group.img);\n        // URL of the uploaded image!\n        groupStorageRef.getDownloadURL().then(url => {\n          group.img = url;\n          console.log('group', group);\n          this.loadingProvider.dismissLoader();\n        })\n\n      }).catch((error) => {\n        this.loadingProvider.dismissLoader();\n        this.loadingProvider.showToast(\"Something went wrong\");\n      });\n    }).catch((error) => {\n      this.loadingProvider.dismissLoader();\n    });\n  }\n\n  // Set group photo and return the group object as promise.\n  setGroupPhotoPromise(group, sourceType): Promise<any> {\n    return new Promise(resolve => {\n      this.groupPhotoOptions.sourceType = sourceType;\n      this.loadingProvider.presentProcessingLoading();\n      // Get picture from camera or gallery.\n      this.camera.getPicture(this.groupPhotoOptions).then((imageData) => {\n        // Process the returned imageURI.\n        let imgBlob = this.imgURItoBlob(\"data:image/jpeg;base64,\" + imageData);\n        let metadata = {\n          'contentType': imgBlob.type\n        };\n        let uploadRef = firebase.storage().ref().child('images/' + firebase.auth().currentUser.uid + '/' + this.generateFilename());\n\n        uploadRef.put(imgBlob, metadata).on('state_changed', (snapshot) => {\n          var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          this.loadingProvider.showProgress(Math.round(progress) + \" %\");\n        }, () => {\n          this.loadingProvider.dismissLoader();\n          console.log(\"Failed\");\n          this.loadingProvider.showToast(\"Failed Uploading, please try again\")\n        }, () => {\n          this.loadingProvider.dismissLoader();\n          this.loadingProvider.showToast(\"Uploaded successfully\")\n          uploadRef.getDownloadURL().then(url => {\n            resolve(url);\n          })\n        });\n\n      }).catch((error) => {\n        this.loadingProvider.dismissLoader();\n      });\n    });\n  }\n\n  //Delete the image given the url.\n  deleteImageFile(path) {\n    var fileName = path.substring(path.lastIndexOf('%2F') + 3, path.lastIndexOf('?'));\n    firebase.storage().ref().child('images/' + firebase.auth().currentUser.uid + '/' + fileName).delete().then(() => { }).catch((error) => { console.log(error) });\n  }\n\n  //Delete the user.img given the user.\n  deleteUserImageFile(user) {\n    var fileName = user.img.substring(user.img.lastIndexOf('%2F') + 3, user.img.lastIndexOf('?'));\n    firebase.storage().ref().child('images/' + user.userId + '/' + fileName).delete().then(() => { }).catch((error) => { console.log(error) });\n  }\n\n  // Delete group image file on group storage reference.\n  deleteGroupImageFile(groupId, path) {\n    var fileName = path.substring(path.lastIndexOf('%2F') + 3, path.lastIndexOf('?'));\n    firebase.storage().ref().child('images/' + groupId + '/' + fileName).delete().then(() => { }).catch((error) => { console.log(error) });\n  }\n\n  // Upload photo message and return the url as promise.\n  uploadPhotoMessage(conversationId, sourceType): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.photoMessageOptions.sourceType = sourceType;\n      this.loadingProvider.presentProcessingLoading();\n      // Get picture from camera or gallery.\n      this.camera.getPicture(this.photoMessageOptions).then((imageData) => {\n        // Process the returned imageURI.\n        let imgBlob = this.imgURItoBlob(\"data:image/jpeg;base64,\" + imageData);\n        let metadata = {\n          'contentType': imgBlob.type\n        };\n        // Generate filename and upload to Firebase Storage.\n        let uploadRef = firebase.storage().ref().child('images/' + conversationId + '/' + this.generateFilename());\n\n        // uploadRef.put(imgBlob, metadata).on('state_changed', (snapshot) => {\n        //   var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n        //   this.loadingProvider.showProgress(Math.round(progress) + \" %\");\n        // }, () => {\n        //   this.loadingProvider.dismissLoader();\n        //   console.log(\"Failed\");\n        //   this.loadingProvider.showToast(\"Failed Uploading, please try again\")\n        // }, () => {\n        //   this.loadingProvider.dismissLoader();\n        //   this.loadingProvider.showToast(\"Uploaded successfully\")\n        //   uploadRef.getDownloadURL().then(url => {\n        //     resolve(url);\n        //   })\n        // });\n        this.firestore.uploadImage(imageData, new Date().getTime().toString() + '.png', 'chat-images').then(resp => {\n          this.loadingProvider.dismissLoader();\n          resolve(resp);\n        })\n      }).catch((error) => {\n        this.loadingProvider.dismissLoader();\n        reject(error);\n      });\n    });\n  }\n\n  // Upload group photo message and return a promise as url.\n  uploadGroupPhotoMessage(groupId, sourceType): Promise<any> {\n    return new Promise(resolve => {\n      this.photoMessageOptions.sourceType = sourceType;\n      this.loadingProvider.presentProcessingLoading();\n      // Get picture from camera or gallery.\n      this.camera.getPicture(this.photoMessageOptions).then((imageData) => {\n        // Process the returned imageURI.\n        let imgBlob = this.imgURItoBlob(\"data:image/jpeg;base64,\" + imageData);\n        let metadata = {\n          'contentType': imgBlob.type\n        };\n        // Generate filename and upload to Firebase Storage.\n        let uploadRef = firebase.storage().ref().child('images/' + groupId + '/' + this.generateFilename());\n\n        uploadRef.put(imgBlob, metadata).on('state_changed', (snapshot) => {\n          var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          this.loadingProvider.showProgress(Math.round(progress) + \" %\");\n        }, () => {\n          this.loadingProvider.dismissLoader();\n          console.log(\"Failed\");\n          this.loadingProvider.showToast(\"Failed Uploading, please try again\")\n        }, () => {\n          this.loadingProvider.dismissLoader();\n          this.loadingProvider.showToast(\"Uploaded successfully\")\n          uploadRef.getDownloadURL().then(url => {\n            resolve(url);\n          })\n        });\n\n      }).catch((error) => {\n        this.loadingProvider.dismissLoader();\n      });\n    });\n  }\n  uploadGroupVideoMessage(groupId): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.commonService.getVideo().then((url: any) => {\n        let videoUrl = url;\n        videoUrl = this.commonService.videoBase64;\n        this.firestore.uploadVideoString(videoUrl, 'DontRamp_chat_' + new Date().getTime()).then(url => {\n          this.loadingProvider.dismissLoader();\n          resolve(url);\n        }, err => {\n          this.loadingProvider.dismissLoader();\n        })\n      }, err => {\n        this.loadingProvider.dismissLoader();\n      });\n      // this.mediaCapture.captureVideo().then(data => {\n      //   let videoUrl = data[0].fullPath;\n      //   console.log(\"video path: \" + videoUrl);\n      //   let x = videoUrl.split(\"/\");\n      //   let filepath = videoUrl.substring(0, videoUrl.lastIndexOf(\"/\"));\n      //   let name = x[x.length - 1];\n      //   console.log(filepath + \" - \" + name);\n      //   this.file.readAsArrayBuffer(filepath, name).then(success => {\n      //     console.log(success);\n      //     let blob = new Blob([success], { type: \"video/mp4\" });\n      //     console.log(blob);\n\n      //     resolve(blob);\n\n      //     // let uploadRef = firebase.storage().ref().child('videos/' + groupId + \"/\" + name);\n\n      //     // uploadRef.put(blob).on('state_changed', (snapshot) => {\n      //     //   var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      //     //   this.loadingProvider.showProgress(Math.round(progress) + \" %\");\n      //     // }, () => {\n      //     //   this.loadingProvider.dismissLoader();\n      //     //   console.log(\"Failed\");\n      //     //   this.loadingProvider.showToast(\"Failed Uploading, please try again\")\n      //     // }, () => {\n      //     //   this.loadingProvider.dismissLoader();\n      //     //   this.loadingProvider.showToast(\"Uploaded successfully\")\n      //     //   uploadRef.getDownloadURL().then(url => {\n      //     //     resolve(url);\n      //     //   })\n      //     // });\n\n      //   });\n      // }, err => {\n      //   this.loadingProvider.dismissLoader();\n      //   console.log(\"Media Err = \" + err);\n      //   reject(null);\n      // });\n    });\n  }\n\n  uploadVideoMessage(conversationId): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.loadingProvider.presentProcessingLoading();\n      this.commonService.getVideo().then(async (url: any) => {\n        let videoUrl = url;\n        videoUrl = this.commonService.videoBase64;\n        await this.loadingProvider.dismissLoader();\n        if(!videoUrl) {\n          return;\n        };\n        console.log(\"videoBase64URL\",  videoUrl);\n        await this.loadingProvider.displayProgress();\n        this.firestore.uploadVideoString(videoUrl, 'DontRamp_chat_' + new Date().getTime()).then(async url => {\n          await this.loadingProvider.dismissLoader();\n          await this.loadingProvider.closeProgress();\n          resolve(url);\n        }, async err => {\n          await this.loadingProvider.dismissLoader();\n          await this.loadingProvider.closeProgress();\n          reject(false);\n        })\n      }, async err => {\n        console.log('getVideoError', err);\n        await this.loadingProvider.dismissLoader();\n        reject(false);\n      });\n      // this.mediaCapture.captureVideo().then(data => {\n      //   let videoUrl = data[0].fullPath;\n      //   console.log(\"video path: \" + videoUrl);\n      //   let x = videoUrl.split(\"/\");\n      //   let filepath = videoUrl.substring(0, videoUrl.lastIndexOf(\"/\"));\n      //   let name = x[x.length - 1];\n      //   console.log(filepath + \" - \" + name);\n      //   this.file.readAsArrayBuffer(filepath, name).then(success => {\n      //     console.log(success);\n      //     let blob = new Blob([success], { type: \"video/mp4\" });\n      //     console.log(blob);\n      //     // let timestamp = (Math.floor(Date.now() / 1000)).toString();\n\n      //     let uploadRef = firebase.storage().ref().child('videos/' + name);\n\n      //     uploadRef.put(blob).on('state_changed', (snapshot) => {\n      //       var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n      //       this.loadingProvider.showProgress(Math.round(progress) + \" %\");\n      //     }, () => {\n      //       this.loadingProvider.dismissLoader();\n      //       console.log(\"Failed\");\n      //       this.loadingProvider.showToast(\"Failed Uploading, please try again\")\n      //     }, () => {\n      //       this.loadingProvider.dismissLoader();\n      //       this.loadingProvider.showToast(\"Uploaded successfully\")\n      //       uploadRef.getDownloadURL().then(url => {\n      //         resolve(url);\n      //       })\n      //     });\n\n\n      //   });\n      // }, err => {\n      //   this.loadingProvider.dismissLoader();\n      //   console.log(\"Media Err = \" + err);\n      // });\n    });\n  }\n}\n"],"sourceRoot":"webpack:///"}