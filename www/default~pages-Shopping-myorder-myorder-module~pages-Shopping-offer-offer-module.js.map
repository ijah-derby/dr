{"version":3,"sources":["./src123/pages/auth/helpers/constants.ts","./src123/pages/auth/services/auth/auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC5B,+DAAM;IACN,mEAAQ;AACV,CAAC,EAHW,kBAAkB,KAAlB,kBAAkB,QAG7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHoD;AACA;AACC;AACK;AAClB;AAEQ;AACC;AACS;AACJ;AAC4B;AACtB;AAG7D;;;;GAIG;AAIH;IAAiC,qEAAQ;IAGvC,qBACY,QAAkB,EACpB,MAAuB,EACvB,KAAiB,EACjB,QAAkB,EAClB,gBAAkC;QAL5C,YAOE,kBAAM,QAAQ,CAAC,SAYhB;QAlBW,cAAQ,GAAR,QAAQ,CAAU;QACpB,YAAM,GAAN,MAAM,CAAiB;QACvB,WAAK,GAAL,KAAK,CAAY;QACjB,cAAQ,GAAR,QAAQ,CAAU;QAClB,sBAAgB,GAAhB,gBAAgB,CAAkB;QAI1C,qHAAqH;QACrH,KAAI,CAAC,IAAI,GAAG,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CACpC,gEAAS,CAAC,UAAC,IAAI;YACb,IAAI,IAAI,EAAE;gBACR,OAAO,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAQ,WAAS,IAAI,CAAC,GAAK,CAAC,CAAC;aAC/D;iBAAM;gBACL,OAAO,sEAAE,CAAC,IAAI,CAAC,CAAC;aACjB;QACH,CAAC,CAAC,CACH,CAAC;;IACJ,CAAC;IAED,4FAA4F;IACrF,6BAAO,GAAd;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,4DAAK,EAAE,CAAC,CAAC,SAAS,EAAE,CAAC;IAC7C,CAAC;IAED,kEAAkE;IACrD,4BAAM,GAAnB,UAAoB,EAAmB;YAAjB,gBAAK,EAAE,sBAAQ;;;;4BAC5B,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,KAAK,EAAE,QAAQ,CAAC;4BAAzE,sBAAO,SAAkE,EAAC;;;;KAC3E;IAED,uDAAuD;IAC1C,4BAAM,GAAnB,UAAoB,EAAgC;YAA9B,4BAAW,EAAE,gBAAK,EAAE,sBAAQ;;;;;4BAC7B,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,QAAQ,CAAC;;wBAAnF,UAAU,GAAG,SAAsE;wBACzF,qBAAM,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,WAAW,eAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;wBAApE,SAAoE,CAAC;wBACrE,sBAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,EAAC;;;;KAC7C;IAED,oDAAoD;IACvC,2CAAqB,GAAlC;;;;4BACS,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE;4BAAjE,sBAAO,SAA0D,EAAC;;;;KACnE;IAED,uGAAuG;IAC1F,qCAAe,GAA5B,UAA6B,IAAY;;;;4BAChC,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;4BAAnD,sBAAO,SAA4C,EAAC;;;;KACrD;IAED,kDAAkD;IACrC,iCAAW,GAAxB,UAAyB,KAAa;;;;;4BACvB,qBAAM,IAAI,CAAC,OAAO,EAAE;;wBAA3B,IAAI,GAAG,SAAoB;wBACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;wBACnB,qBAAM,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAQ,WAAS,IAAI,CAAC,GAAK,EAAE,IAAI,CAAC;;wBAAjE,SAAiE,CAAC;wBAC3D,qBAAM,iDAAa,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC;4BAA3D,sBAAO,SAAoD,EAAC;;;;KAC7D;IAED,2BAA2B;IACd,oCAAc,GAA3B,UAA4B,WAAmB,EAAE,QAAgB;;;;gBACzD,IAAI,GAAG,iDAAa,EAAE,CAAC,WAAW,CAAC;gBACnC,UAAU,GAAG,iDAAa,CAAC,iBAAiB,CAAC,UAAU,CAAC,iDAAa,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;gBAC9G,sBAAO,IAAI,CAAC,2CAA2C,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC;wBACvE,OAAO,iDAAa,EAAE,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;oBAC9D,CAAC,CAAC,EAAC;;;KACJ;IAED,gCAAgC;IACnB,uCAAiB,GAA9B,UAA+B,KAAa;;;;4BACnC,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC;4BAA3D,sBAAO,SAAoD,EAAC;;;;KAC7D;IAGD,sBAAW,sCAAa;QADxB,sCAAsC;aACtC;YACE,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QACpF,CAAC;;;OAAA;IAED,4EAA4E;IAC/D,0CAAoB,GAAjC,UAAkC,IAAY,EAAE,QAAgB;;;;4BACvD,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,EAAE,QAAQ,CAAC;4BAAlE,sBAAO,SAA2D,EAAC;;;;KACpE;IAED;;OAEG;IACU,gCAAU,GAAvB,UAAwB,YAAoB;;;;;;6BAErC,MAAc,CAAC,OAAO,EAAvB,wBAAuB;wBACZ,qBAAM,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;;wBAAjD,UAAU,GAAG,SAAoC,CAAC;;4BAErC,qBAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC;;wBAA9C,UAAU,GAAG,SAAiC,CAAC;;4BAE1C,qBAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC;4BAAjD,sBAAO,SAA0C,EAAC;;;;KACnD;IAED,0GAA0G;IAC7F,6BAAO,GAApB;;;;4BACS,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC;4BAC3C,mCAAmC;wBACrC,CAAC,CAAC;4BAFF,sBAAO,SAEL,EAAC;;;;KACJ;IAED,wCAAwC;IAChC,oCAAc,GAAtB,UAAuB,EAAqC;YAAnC,YAAG,EAAE,gBAAK,EAAE,4BAAW,EAAE,sBAAQ;QACxD,IAAM,IAAI,GAAG;YACX,GAAG;YACH,KAAK;YACL,WAAW;YACX,QAAQ;SACT,CAAC;QACF,OAAO,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAQ,WAAS,GAAK,EAAE,IAAI,CAAC,CAAC;IAChE,CAAC;IAED;;;OAGG;IACW,iCAAW,GAAzB,UAA0B,YAAoB;;;;;;6BAExC,aAAY,KAAK,sEAAkB,CAAC,MAAM,GAA1C,wBAA0C;wBACrC,qBAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;gCAC5B,WAAW,EAAE,wEAAW,CAAC,cAAc;gCACvC,OAAO,EAAE,IAAI;gCACb,MAAM,EAAE,eAAe;6BACxB,CAAC;;wBAJF,IAAI,GAAG,SAIL,CAAC;wBAEH,sBAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,iDAAa,CAAC,kBAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAC;4BAEjG,qBAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,gBAAgB,CAAC,CAAC;;wBAApD,IAAI,GAAG,SAA6C,CAAC;wBAErD,sBAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,iDAAa,CAAC,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAC;;;;KAE9H;IAED,mEAAmE;IACrD,8BAAQ,GAAtB,UAAuB,YAAoB;;;;;;wBAEzC,IAAI,YAAY,KAAK,sEAAkB,CAAC,MAAM,EAAE;4BAC9C,QAAQ,GAAG,IAAI,iDAAa,CAAC,kBAAkB,EAAE,CAAC;yBACnD;6BAAM;4BACL,QAAQ,GAAG,IAAI,iDAAa,CAAC,oBAAoB,EAAE,CAAC;yBACrD;wBACM,qBAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC;4BAAvD,sBAAO,SAAgD,EAAC;;;;KACzD;;gBA5IqB,sDAAQ;gBACZ,kEAAe;gBAChB,wEAAU;gBACP,mEAAQ;gBACA,iGAAgB;;IARjC,WAAW;QAHvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAKsB,sDAAQ;YACZ,kEAAe;YAChB,wEAAU;YACP,mEAAQ;YACA,iGAAgB;OARjC,WAAW,CAiJvB;IAAD,kBAAC;CAAA,CAjJgC,oEAAQ,GAiJxC;AAjJuB","file":"default~pages-Shopping-myorder-myorder-module~pages-Shopping-offer-offer-module.js","sourcesContent":["export enum SocialAuthProvider {\n  google,\n  facebook\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { Facebook } from '@ionic-native/facebook/ngx';\nimport { GooglePlus } from '@ionic-native/google-plus/ngx';\nimport * as firebase from 'firebase/app';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { of } from 'rxjs/internal/observable/of';\nimport { first, switchMap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { Extender } from 'src/shared/helpers/extender';\nimport { FirestoreService } from 'src/shared/services/firestore/firestore.service';\nimport { SocialAuthProvider } from '../../helpers/constants';\nimport { IUser } from '../../helpers/model';\n\n/**\n * firebase authentication methods are handled by this service\n * email handlers https://firebase.google.com/docs/auth/custom-email-handler\n * authentication tutorial https://www.positronx.io/full-angular-7-firebase-authentication-system/\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService extends Extender {\n  public user: Observable<IUser>;\n\n  constructor(\n    protected injector: Injector,\n    private afAuth: AngularFireAuth,\n    private gplus: GooglePlus,\n    private facebook: Facebook,\n    private firestoreService: FirestoreService\n  ) {\n    super(injector);\n\n    /** watch auth state if user is logged in, get user info from users list as observable else return observable null */\n    this.user = this.afAuth.authState.pipe(\n      switchMap((user) => {\n        if (user) {\n          return this.firestoreService.doc$<IUser>(`users/${user.uid}`);\n        } else {\n          return of(null);\n        }\n      })\n    );\n  }\n\n  /** get user and return as a promise to access easily in components using async and await */\n  public getUser() {\n    return this.user.pipe(first()).toPromise();\n  }\n\n  /** sign in user with email and password using firebase library */\n  public async signIn({ email, password }) {\n    return await this.afAuth.auth.signInWithEmailAndPassword(email, password);\n  }\n\n  /** sign up user to firebase and update user details */\n  public async signUp({ displayName, email, password }) {\n    const credential = await this.afAuth.auth.createUserWithEmailAndPassword(email, password);\n    await credential.user.updateProfile({ displayName, photoURL: null });\n    return this.updateUserData(credential.user);\n  }\n\n  /** send email verification to authenticated user */\n  public async sendEmailVerification() {\n    return await this.afAuth.auth.currentUser.sendEmailVerification();\n  }\n\n  /** use by email verification to apply verification code and set user emailVerified property to true */\n  public async applyActionCode(code: string) {\n    return await this.afAuth.auth.applyActionCode(code);\n  }\n\n  /** update user email in auth and in users list */\n  public async updateEmail(email: string) {\n    const user = await this.getUser();\n    user.email = email;\n    await this.firestoreService.set<IUser>(`users/${user.uid}`, user);\n    return await firebase.auth().currentUser.updateEmail(email);\n  }\n\n  /** update user password */\n  public async updatePassword(oldPassword: string, password: string) {\n    const user = firebase.auth().currentUser;\n    const credential = firebase.auth.EmailAuthProvider.credential(firebase.auth().currentUser.email, oldPassword);\n    return user.reauthenticateAndRetrieveDataWithCredential(credential).then(() => {\n      return firebase.auth().currentUser.updatePassword(password);\n    });\n  }\n\n  /** send password reset email */\n  public async sendPasswordReset(email: string) {\n    return await this.afAuth.auth.sendPasswordResetEmail(email);\n  }\n\n  /** get user emailVerified property */\n  public get emailVerified() {\n    return this.afAuth.auth.currentUser && this.afAuth.auth.currentUser.emailVerified;\n  }\n\n  /** confirm password reset with code from email verification and password */\n  public async confirmPasswordReset(code: string, password: string) {\n    return await this.afAuth.auth.confirmPasswordReset(code, password);\n  }\n\n  /** select type of social login, either facebook or google, use native login with cordova plugins if on device or web login\n   * on browser. on complete update user details\n   */\n  public async socialogin(providerType: number) {\n    let credential: { user: { uid: any; email: any; displayName: any; photoURL: any } };\n    if ((window as any).cordova) {\n      credential = await this.nativeLogin(providerType);\n    } else {\n      credential = await this.webLogin(providerType);\n    }\n    return await this.updateUserData(credential.user);\n  }\n\n  /** sign out of the app and after sign out destroy all subscriptions to avoid missing permissions error */\n  public async signOut() {\n    return await this.afAuth.auth.signOut().then(() => {\n      // this.forceSubscriptionDestroy();\n    });\n  }\n\n  /** update user details in users list */\n  private updateUserData({ uid, email, displayName, photoURL }) {\n    const data = {\n      uid,\n      email,\n      displayName,\n      photoURL\n    };\n    return this.firestoreService.set<IUser>(`users/${uid}`, data);\n  }\n\n  /** do a native login with cordova plugins for google or facebook,\n   * specify by providerType with is an enum of providers\n   * get token from successful native login and use with firebase library to login with token.\n   */\n  private async nativeLogin(providerType: number): Promise<any> {\n    let cred: { idToken?: string; authResponse: { accessToken: string } };\n    if (providerType === SocialAuthProvider.google) {\n      cred = await this.gplus.login({\n        webClientId: environment.googleClientId,\n        offline: true,\n        scopes: 'profile email'\n      });\n\n      return this.afAuth.auth.signInWithCredential(firebase.auth.GoogleAuthProvider.credential(cred.idToken));\n    } else {\n      cred = await this.facebook.login(['public_profile']);\n\n      return this.afAuth.auth.signInWithCredential(firebase.auth.FacebookAuthProvider.credential(cred.authResponse.accessToken));\n    }\n  }\n\n  /** do web login for third party providers, specify providerType */\n  private async webLogin(providerType: number): Promise<any> {\n    let provider: firebase.auth.GoogleAuthProvider | firebase.auth.FacebookAuthProvider | firebase.auth.AuthProvider;\n    if (providerType === SocialAuthProvider.google) {\n      provider = new firebase.auth.GoogleAuthProvider();\n    } else {\n      provider = new firebase.auth.FacebookAuthProvider();\n    }\n    return await this.afAuth.auth.signInWithPopup(provider);\n  }\n}\n"],"sourceRoot":"webpack:///"}