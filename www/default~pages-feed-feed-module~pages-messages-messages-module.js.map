{"version":3,"sources":["./src/app/services/messages.service.ts"],"names":[],"mappings":"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","file":"default~pages-feed-feed-module~pages-messages-messages-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IUser } from 'src/pages/auth/helpers/model';\nimport { AuthService } from 'src/pages/auth/services/auth/auth.service';\nimport { FirestoreService } from 'src/shared/services/firestore/firestore.service';\nimport { DataService } from './data.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagesService {\n\n  conversations: any;\n  updateDateTime: any;\n  groups: any;\n  isLoading;\n\n  unreadMessagesCount = 0;\n  unreadGroupMessagesCount = 0;\n  conversationsInfo = [];\n  groupsInfo = [];\n\n  constructor(\n    private firestore: FirestoreService,\n    private authService: AuthService,\n    private dataProvider: DataService\n  ) { }\n\n  initGroups() {\n    this.isLoading = true;\n    this.dataProvider.getGroups().subscribe((groupIdsRes: any[]) => {\n      let groupIds = [];\n      groupIds = groupIdsRes;\n      console.log(groupIds);\n      if (groupIds.length > 0) {\n        this.groupsInfo = groupIds;\n        if (this.groups && this.groups.length > groupIds.length) {\n          // User left/deleted a group, clear the list and add or update each group again.\n          this.groups = [];\n        }\n        groupIds.forEach((groupId) => {\n          console.log('groupId', groupId);\n          this.dataProvider.getGroup(groupId.id).subscribe((groupRes: any) => {\n            console.log(groupRes);\n            let group = groupRes;\n            if (group.id != null) {\n\n              this.firestore.col$(`groups/${groupId.id}/messages`).subscribe((resp: any[]) => {\n                group.messages = resp;\n                group.unreadMessagesCount = group.messages ? group.messages.length - groupId.messagesRead : 0;\n                // Get group's last active date\n                if(resp.length > 0) {\n                  group.date = resp[resp.length - 1].date;\n                }\n                this.addOrUpdateGroup(group);\n              })\n            }\n\n          });\n        });\n        this.isLoading = false;\n      } else {\n        this.groups = [];\n        this.isLoading = false;\n        this.groupsInfo = null;\n      }\n    });\n\n    // Update groups' last active date time elapsed every minute based on Moment.js.\n    var that = this;\n    if (!that.updateDateTime) {\n      that.updateDateTime = setInterval(function () {\n        if (that.groups) {\n          that.groups.forEach((group) => {\n            let date = group.date;\n            group.date = new Date(date);\n          });\n        }\n      }, 60000);\n    }\n  }\n\n  async initConversation() {\n    this.conversations = [];\n    this.isLoading = true;\n\n    const currentUser = await this.authService.getUser();\n    if (currentUser != null) {\n      // Get info of conversations of current logged in user.\n      this.dataProvider.getConversations().subscribe((conversationsInfoRes: any) => {\n\n        let conversations = [];\n        conversations = conversationsInfoRes.map(c => ({ key: c.id, ...c }));\n\n        console.log(conversations);\n        this.conversationsInfo = [];\n\n        if (conversations.length > 0) {\n          this.conversationsInfo = conversations;\n          conversations.forEach((conversation) => {\n            console.log(conversation);\n            if (conversation) {\n              // Get conversation partner info.\n              this.dataProvider.getUser(conversation.key).subscribe((user) => {\n                console.log('user', conversation.sender);\n                conversation.friend = user;\n                // Get conversation info.\n\n                this.dataProvider.getConversation(conversation.conversationId).subscribe((obj: any) => {\n                  // Get last message of conversation.\n                  console.log(obj);\n                  if (obj != null) {\n                    this.firestore.colWithIds$('conversations/' + conversation.conversationId + '/messages', ref => ref.orderBy('createdAt', 'desc')).subscribe(resp => {\n                      console.log('resp', resp);\n                      // resp = resp.reverse();\n                      let lastMessage = resp[0];\n                      if(!lastMessage) {\n                        return;\n                      }\n                      console.log('lastMsg', lastMessage);\n                      conversation.date = lastMessage.date;\n                      conversation.sender = lastMessage.sender;\n                      // Set unreadMessagesCount\n                      conversation.unreadMessagesCount = resp.length - conversation.messagesRead;\n                      console.log(conversation.unreadMessagesCount);\n                      // Process last message depending on messageType.\n                      if (lastMessage.type == 'text') {\n                        if (lastMessage.sender == currentUser.uid) {\n                          conversation.message = 'You: ' + lastMessage.message;\n                        } else {\n                          conversation.message = lastMessage.message;\n                        }\n                        console.log('conv', conversation);\n                      } else {\n                        if (lastMessage.sender == currentUser.uid) {\n                          conversation.message = 'You sent a photo message.';\n                        } else {\n                          conversation.message = 'has sent you a photo message.';\n                        }\n                      }\n                      // Add or update conversation.\n                      this.addOrUpdateConversation(conversation);\n                    });\n                  }\n                });\n              });\n            }\n\n          });\n          this.isLoading = false;\n        }\n        else {\n          this.conversations = [];\n          this.isLoading = false;\n        }\n      });\n\n      // Update conversations' last active date time elapsed every minute based on Moment.js.\n      var that = this;\n      if (!that.updateDateTime) {\n        that.updateDateTime = setInterval(function () {\n          if (that.conversations) {\n            that.conversations.forEach((conversation) => {\n              let date = conversation.date;\n              conversation.date = new Date(date);\n            });\n          }\n        }, 60000);\n      }\n    }\n  }\n\n\n  addOrUpdateConversation(conversation) {\n    console.log('conversation', conversation);\n    if (!this.conversations) {\n      this.conversations = [conversation];\n    } else {\n      var index = -1;\n      index = this.conversations.findIndex(item => item.conversationId === conversation.conversationId);\n      // for (var i = 0; i < this.conversations.length; i++) {\n      //   if (this.conversations[i].sender == conversation.sender) {\n      //     index = i;\n      //   }\n      // }\n      if (index > -1) {\n        console.log(\"conv index\", conversation);\n        this.conversations[index] = conversation;\n      } else {\n        console.log(\"conv pushing\", conversation);\n        this.conversations.push(conversation);\n      }\n      // Sort by last active date.\n      this.conversations.sort((a: any, b: any) => {\n        let date1 = new Date(a.date);\n        let date2 = new Date(b.date);\n        if (date1 > date2) {\n          return -1;\n        } else if (date1 < date2) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    }\n    this.computeUnreadMessagesCount();\n  }\n\n\n  // Add or update group for real-time sync based on our observer.\n  addOrUpdateGroup(group) {\n    if (!this.groups) {\n      this.groups = [group];\n    } else {\n      var index = -1;\n      for (var i = 0; i < this.groups.length; i++) {\n        if (this.groups[i].id == group.id) {\n          index = i;\n        }\n      }\n      if (index > -1) {\n        this.groups[index] = group;\n      } else {\n        this.groups.push(group);\n      }\n    }\n    this.computeUnreadGroupMessagesCount();\n  }\n\n\n  // Compute all conversation's unreadMessages.\n  computeUnreadMessagesCount() {\n    this.unreadMessagesCount = 0;\n    if (this.conversations) {\n      this.conversations.forEach(group => {\n        this.unreadMessagesCount = this.unreadMessagesCount + group.unreadMessagesCount;\n      });\n    }\n  }\n\n  getUnreadMessagesCount() {\n    return (this.unreadMessagesCount != null && this.unreadMessagesCount > 0) ? this.unreadMessagesCount : 0;\n  }\n\n  // Compute all group's unreadMessages.\n  computeUnreadGroupMessagesCount() {\n    this.unreadGroupMessagesCount = 0;\n    if (this.groups) {\n      this.groups.forEach(group => {\n        if(group.name) {\n          this.unreadGroupMessagesCount = this.unreadGroupMessagesCount + group.unreadMessagesCount;\n        }\n      });\n    }\n  }\n\n  getUnreadGroupMessagesCount() {\n    return (this.unreadGroupMessagesCount != null && this.unreadGroupMessagesCount > 0) ? this.unreadGroupMessagesCount : 0;\n  }\n\n}\n"],"sourceRoot":"webpack:///"}